---
- name: initial setup of the priorities tool
  hosts: all
  connection: ssh
  remote_user: "{{ remote_user }}"
  sudo: yes

  vars:
    app_name: cogs
    dbname: 'cogs' # no dash

    venv_path: '/usr/local/venv/{{app_name}}'
    project_path: '/usr/local/apps/{{app_name}}'
    webuser: www-data
    manage: "{{ venv_path }}/bin/python {{ project_path }}/priorities/manage.py"

  vars_files:
    - local_vars.yml

  tasks:

    - name: make www-data remote user group
      user: name=www-data groups={{ remote_user }} append=yes

    - name: go into maintenance mode
      notify:
        - turn off maintenance mode
      command: "touch /tmp/.maintenance_mode_{{ app_name }}"

    - name: Get aptitude for upgrade
      tags:
        - base
      apt: pkg=aptitude state=present

    - name: Pycurl dep to run upgrade
      tags:
        - base
      apt: pkg=python-pycurl state=present

    - name: Safe system upgrade via aptitude
      tags:
        - base
      apt: upgrade=safe update_cache=yes cache_valid_time=604800

    - name: install base packages
      tags:
        - base
        - deps
      apt: pkg={{ item }} state=present
      with_items:
        - build-essential
        - cython
        - csstidy
        - git-core
        - gdal-bin
        - gfortran
        - htop
        - libmapnik-dev
        - libopenblas-dev
        - liblapack-dev
        - libgeos-dev
        - libgdal1-dev
        - libpq-dev
        - mercurial
        - mapnik-utils
        - nginx-full
        - postgresql
        - postgresql-9.3-postgis-2.1
        - python-dev
        - python-psycopg2
        - python-mapnik
        - python-software-properties
        - python-psycopg2
        - python-virtualenv
        - python-numpy
        - python-scipy
        - python-gdal
        - redis-server
        - subversion
        - supervisor
        - sysstat
        - uwsgi
        - vim

    - name: create celery config for supervisor
      notify: restart celery
      template: src=templates/celeryd.conf.j2 dest=/etc/supervisor/conf.d/celeryd-{{ app_name }}.conf owner=root group={{ remote_user }} mode=0644
      #copy: src=files/foo.conf dest=/etc/file.conf owner=bin group=wheel mode=0644

    - name: Install global python requirements
      tags:
          - deps
      pip: name={{item}} state=present
      with_items:
        - redis

    - name: Install python requirements
      tags:
          - deps
      pip: name={{item}} state=present virtualenv={{ venv_path }} virtualenv_site_packages=yes
      with_items:
        - xlrd
        - django<1.5
        - django-redis-sessions
        - python-memcached
        - modestmaps
        - django-celery
        - celery
        - django-redis
        - celery-with-redis
        - redis
        - kombu
        - uwsgi>=1.2.6
        - 'git+https://github.com/springmeyer/djmapnik.git@8d736a73470b#egg=djmapnik-0.1.3'
        - 'git+git://github.com/perrygeo/TileStache.git@master#egg=TileStache'
        - 'git+https://github.com/perrygeo/jenks.git#egg=jenks'

    - name: Install Madrona
      command: "sudo /usr/local/venv/cogs/bin/pip install -e git+https://github.com/Ecotrust/madrona.git@master#egg=madrona --allow-unverified elementtree"

    - name: git checkout
      when: manage_with_git
      git: repo=https://github.com/Ecotrust/cogs-priorities.git
           dest={{ project_path }}
           version={{ git_branch }}
      tags: 
        - deploy

    - name: go script
      template: src=templates/go.j2 dest=/home/{{ remote_user }}/go_{{ app_name }} owner={{ remote_user }} group={{ remote_user }} mode=0755

    - name: settings local
      tags:
        - deploy
      template: src=templates/settings_local.py dest={{ project_path }}/priorities/settings_local.py owner={{ remote_user }} group={{ remote_user }} mode=0755

    - name: sql script to fix postgres perms
      template: src=templates/fix_perms.sql dest=/tmp/fix_perms.sql mode=0755

    - name: copy cleangeometry
      copy: src=files/cleangeometry.sql dest=/tmp/cleangeometry.sql mode=0755

    - name: create db user  
      sudo_user: postgres
      # same as dbname
      postgresql_user: name={{ dbname }} password={{ dbname }} role_attr_flags=CREATEDB,NOSUPERUSER

    - name: create postgres db
      sudo_user: postgres
      register: postgres_create_returncode
      postgresql_db: name={{ dbname }}
                     owner={{ dbname }}
                     encoding='UTF-8'
                     lc_collate='en_US.UTF-8'
                     lc_ctype='en_US.UTF-8'
                     template='template0'

    - name: load postgis
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/postgis.sql
      when: postgres_create_returncode['changed']

    - name: load spatial_ref_sys
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/spatial_ref_sys.sql
      when: postgres_create_returncode['changed']

    - name: load cleangeometry
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /tmp/cleangeometry.sql
      when: postgres_create_returncode['changed']

    - name: postgis perms
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /tmp/fix_perms.sql 
      when: postgres_create_returncode['changed']

    - lineinfile: dest=/usr/local/venv/cogs/lib/python2.7/site-packages/django/contrib/gis/geos/libgeos.py regexp="^    ver = geos_version()" line="    ver = geos_version().decode().split(' ')[0]"

    - name: syncdb
      tags:
        - deploy
      command: "{{ manage }} syncdb --noinput"

    - name: migrate 
      tags:
        - deploy
      command: "{{ manage }} migrate --noinput"

    - name: install media
      tags:
        - deploy
      command: "{{ manage }} install_media -a"

    - name: site
      tags:
        - deploy
      command: "{{ manage }} site {{ domain }}"

    - name: enable sharing 
      command: "{{ manage }} enable_sharing --all"
      when: postgres_create_returncode['changed']

    - name: install flatblocks
      command: "{{ manage }} loaddata {{ project_path }}/priorities/fixtures/flatblocks.json"
      when: postgres_create_returncode['changed']

    - name: install base layers
      command: "{{ manage }} loaddata {{ project_path }}/priorities/fixtures/project_base_layers.json"
      when: postgres_create_returncode['changed']

    - name: install uwsgi app
      notify: restart uwsgi
      template: src=templates/uwsgi.ini dest=/etc/uwsgi/apps-available/{{ app_name }}.ini owner=root group={{ remote_user }} mode=0754

    - name: enable uwsgi app
      file: src=/etc/uwsgi/apps-available/{{ app_name }}.ini dest=/etc/uwsgi/apps-enabled/{{ app_name }}.ini owner=root group={{ remote_user }} state=link

    - name: install nginx site 
      notify: reload nginx
      template: src=templates/nginx.j2 dest=/etc/nginx/sites-available/{{ app_name }} owner=root group={{ remote_user }} mode=0754

    - name: enable nginx site
      file: src=/etc/nginx/sites-available/{{ app_name }} dest=/etc/nginx/sites-enabled/{{ app_name }} owner=root group={{ remote_user }} state=link

    - name: remove default site
      file: path=/etc/nginx/sites-enabled/default state=absent

    - name: log file permissions
      file: path={{ project_path }}/logs/seak.log state=file owner={{ webuser }} group={{ remote_user }} mode=0775

    - name: stupid uwsgi hack
      file: path=/usr/lib/uwsgi/plugins state=directory

    - name: marxan_output writable by remote_user (celery)
      file: path={{ project_path }}/marxan_output owner={{ webuser }} group={{ remote_user }} state=directory mode=775

    - name: template dir writable
      file: path={{ project_path }}/marxan_output/template owner={{ webuser }} group={{ remote_user }} state=directory mode=775

    - name: uwsgi init script to use venv version of uwsgi
      notify: restart uwsgi
      template: src=templates/uwsgi.init.j2 dest=/etc/init.d/uwsgi owner=root group=root mode=0755

    - name: install wsgi script for TileStache
      template: src=templates/tilestache_wsgi.py dest={{ project_path }}/tilestache_wsgi.py owner={{ remote_user }} group={{ remote_user }} mode=0755

    - name: install uwsgi app for tilestache
      notify: restart uwsgi
      template: src=templates/tilestache_uwsgi.ini dest=/etc/uwsgi/apps-available/tilestache-{{ app_name }}.ini owner=root group={{ remote_user }} mode=0754

    - name: enable uwsgi app for tilestache
      file: src=/etc/uwsgi/apps-available/tilestache-{{ app_name }}.ini dest=/etc/uwsgi/apps-enabled/tilestache-{{ app_name }}.ini owner=root group={{ remote_user }} state=link

    # COPY datasets
    # depends on the "newdata" variable being defined at the command line
    #    .... -extra-vars "newdata=true"
    - name: copy data
      when: (manage_with_git | bool and newdata is defined and newdata | bool)
      #sudo_user: "{{ remote_user }}"
      copy: src=../data dest={{ project_path }}

    # INSTALL data
    - name: import planning units
      when: newdata is defined and newdata
      notify: 
        - restart celery
        - reload nginx
        - restart uwsgi
      command: "{{ manage }} import_planning_units {{ project_path }}/data/planning_units_simple.shp {{ project_path }}/data/metrics.xls {{ project_path }}/data/planning_units_full.shp"

    - name: clear redis cache
      redis: command=flush db=5 flush_mode=db  ##!! IMPORTANT, make sure this matches settings.APP_REDIS_DB
      when: newdata is defined and newdata
      # command: "redis-cli FLUSHALL"

    - name: clear django cache
      notify:
        - precache
      when: newdata is defined and newdata
      command: "{{manage}} clear_cache"

    - name: remove all pyc files
      command: >
        find . -name '*.pyc' -exec rm -f {} \;

    - name: restart
      tags:
        - restart 
        - deploy
      debug: msg="Restarting services..."  # dummy
      changed_when: True
      notify: 
        - restart celery
        - reload nginx
        - restart uwsgi

    - name: make sure supervisor is started
      tags:
        - restart
      action: service name=supervisor state=started 

      #New Relic stuff modified from https://github.com/sivel/ansible-newrelic

    - name: Add New Relic repo key
      apt_key:
        url: https://download.newrelic.com/548C16BF.gpg
        id: 548C16BF
        state: present
      when: use_new_relic

    - name: Add New Relic repo
      copy:
        content: "deb http://apt.newrelic.com/debian/ newrelic non-free"
        dest: /etc/apt/sources.list.d/newrelic.list
        owner: root
        group: root
        mode: 0644
      register: newrelic_repo
      when: use_new_relic

    - name: apt-get update for newrelic
      apt:
        update_cache: yes
      when: use_new_relic and newrelic_repo.changed

    - name: Install New Relic Server Monitor
      apt:
        pkg: newrelic-sysmond
        update_cache: yes
        cache_valid_time: 604800
        state: latest
      when: use_new_relic

    - name: Configure New Relic
      command: "nrsysmond-config --set license_key={{ newrelic_license_key }}"
      notify:
        - restart newrelic
      when: use_new_relic


  handlers: 

    - name: restart celery 
      supervisorctl: name=celeryd-{{ app_name }} state=restarted

    - name: restart uwsgi
      action: service name=uwsgi state=restarted

    - name: reload nginx
      action: service name=nginx state=reloaded

    - name: turn off maintenance mode
      command: "rm /tmp/.maintenance_mode_{{ app_name }}"

    - name: precache
      async: 10000
      poll: 0
      command: "{{ manage }} precache"

    - name: turn off maintenance mode
      command: "rm /tmp/.maintenance_mode"

    - name: restart newrelic
      service:
        name: newrelic-sysmond
        state: restarted
